from flask import current_app
import itsdangerous

class Remailer:
	'''The remailer feature improves user privacy by hiding real mail addresses
	from services and instead providing them with autogenerated pseudonymous
	remailer addresses. If a service sends a mail to a remailer address, the mail
	service uses an uffd API endpoint to get the real mail address and rewrites
	the remailer address with it. In case of a leak of user data from a service,
	the remailer addresses are useless for third-parties.'''

	# pylint: disable=no-self-use

	@property
	def configured(self):
		return bool(current_app.config['REMAILER_DOMAIN'])

	def get_serializer(self):
		secret = current_app.config['REMAILER_SECRET_KEY'] or current_app.secret_key
		return itsdangerous.URLSafeSerializer(secret, salt='remailer_address_v1')

	def build_local_part(self, service_id, user_id):
		return 'v1-' + self.get_serializer().dumps([service_id, user_id])

	def build_address(self, service_id, user_id):
		return self.build_local_part(service_id, user_id) + '@' + current_app.config['REMAILER_DOMAIN']

	def is_remailer_domain(self, domain):
		domains = {domain.lower().strip() for domain in current_app.config['REMAILER_OLD_DOMAINS']}
		if current_app.config['REMAILER_DOMAIN']:
			domains.add(current_app.config['REMAILER_DOMAIN'].lower().strip())
		return domain.lower().strip() in domains

	def parse_address(self, address):
		if '@' not in address:
			return None
		local_part, domain = address.rsplit('@', 1)
		if not self.is_remailer_domain(domain) or not local_part.startswith('v1-'):
			return None
		data = local_part[len('v1-'):]
		try:
			service_id, user_id = self.get_serializer().loads(data)
		except itsdangerous.BadData:
			return None
		return (service_id, user_id)

remailer = Remailer()
