image: registry.git.cccv.de/uffd/docker-images/buster

variables:
  DEBIAN_FRONTEND: noninteractive 
  GIT_SUBMODULE_STRATEGY: normal
  APT_API_URL: https://packages.cccv.de
  APT_REPO: uffd
  PYLINT_PIN: pylint~=2.10.0

before_script:
  - python3 -V
  - lsb_release -a
  - uname -a
  - python3 -m pylint --version
  - python3 -m coverage --version
  - export UFFD_PACKAGE_VERSION="$(git describe | sed -E -n -e 's/^v([0-9.]*)$/\1/p' -e 's/^v([0-9.]*)-([0-9]*)-g([0-9a-z]*)$/\1.dev+git.\3/p' | grep .)"

.build:
  stage: build

build:pip:
  extends: .build
  script:
  - PACKAGE_VERSION="${UFFD_PACKAGE_VERSION}" python3 -m build
  artifacts:
    paths:
      - dist/*

build:apt:
  extends: .build
  script:
  - ./debian/create_changelog.py uffd > debian/changelog
  - export PYBUILD_INSTALL_ARGS="--install-lib=/usr/share/uffd/ --install-scripts=/usr/share/uffd/"
  - export DEB_BUILD_OPTIONS=nocheck
  - dpkg-buildpackage -us -uc
  - mv ../*.deb ./
  - dpkg-deb -I *.deb
  - dpkg-deb -c *.deb
  artifacts:
    paths:
    - ./*.deb

db_migrations_updated:
  stage: test
  needs: []
  script:
  - FLASK_APP=uffd FLASK_ENV=testing flask db upgrade
  - FLASK_APP=uffd FLASK_ENV=testing flask db migrate 2>&1 | grep -q 'No changes in schema detected'

linter:buster:
  image: registry.git.cccv.de/uffd/docker-images/buster
  stage: test
  needs: []
  script:
  - pip3 install $PYLINT_PIN pylint-gitlab pylint-flask-sqlalchemy # this force-updates jinja2 and some other packages!
  - python3 -m pylint --output-format=pylint_gitlab.GitlabCodeClimateReporter:codeclimate.json,pylint_gitlab.GitlabPagesHtmlReporter:pylint.html,colorized uffd
  artifacts:
    when: always
    paths:
    - pylint.html
    reports:
      codequality: codeclimate.json

linter:bullseye:
  image: registry.git.cccv.de/uffd/docker-images/bullseye
  stage: test
  needs: []
  script:
  - pip3 install $PYLINT_PIN pylint-gitlab pylint-flask-sqlalchemy # this force-updates jinja2 and some other packages!
  - python3 -m pylint --output-format=pylint_gitlab.GitlabCodeClimateReporter:codeclimate.json,pylint_gitlab.GitlabPagesHtmlReporter:pylint.html,colorized uffd
  artifacts:
    when: always
    paths:
    - pylint.html
    reports:
      codequality: codeclimate.json

tests:buster:sqlite:
  image: registry.git.cccv.de/uffd/docker-images/buster
  stage: test
  needs: []
  script:
  - rm -rf pages
  - mkdir -p pages
  - cp -r uffd/static pages/static
  - DUMP_PAGES=pages python3-coverage run --include 'uffd/*.py' -m pytest --junitxml=report.xml || touch failed
  - sed -i -e 's/href="\/static\//href=".\/static\//g' -e 's/src="\/static\//src=".\/static\//g' pages/*.html || true
  - python3-coverage report -m
  - python3-coverage html
  - python3-coverage xml
  - test ! -e failed
  artifacts:
    when: always
    paths:
    - htmlcov/index.html
    - htmlcov
    - pages
    expose_as: 'Coverage Report'
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  coverage: '/^TOTAL.*\s+(\d+\%)$/'

tests:buster:mysql:
  image: registry.git.cccv.de/uffd/docker-images/buster
  stage: test
  needs: []
  script:
  - service mysql start
  - TEST_WITH_MYSQL=1 python3 -m pytest --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

tests:bullseye:sqlite:
  image: registry.git.cccv.de/uffd/docker-images/bullseye
  stage: test
  needs: []
  script:
  - python3 -m pytest --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

tests:bullseye:mysql:
  image: registry.git.cccv.de/uffd/docker-images/bullseye
  stage: test
  needs: []
  script:
  - service mariadb start
  - TEST_WITH_MYSQL=1 python3 -m pytest --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

html5validator:
  stage: test
  needs:
  - job: tests:buster:sqlite
  script:
  - html5validator --root pages 2>&1 | tee html5validator.log
  artifacts:
    when: on_failure
    paths:
    - pages
    - html5validator.log

.trans:
  stage: test
  needs: []
  script:
  - ./update_translations.sh $TRANSLATION_LANGUAGE
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
trans_de:
  extends: .trans
  variables:
    TRANSLATION_LANGUAGE: de

test:package:pip:buster:
  image: registry.git.cccv.de/uffd/docker-images/buster
  stage: test
  needs:
  - job: build:pip
  script:
  - pip3 install dist/*.tar.gz

test:package:pip:bullseye:
  image: registry.git.cccv.de/uffd/docker-images/bullseye
  stage: test
  needs:
  - job: build:pip
  script:
  - pip3 install dist/*.tar.gz

# Since we want to test if the package installs correctly on a fresh Debian
# install (has correct dependencies, etc.), we don't use uffd/docker-images
# here
test:package:apt:buster:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/debian:buster
  stage: test
  needs:
  - job: build:apt
  before_script: []
  script:
  - apt -y update
  - apt -y install curl ./*.deb
  - service uwsgi start uffd || ( service uwsgi status uffd ; sleep 15; cat /var/log/uwsgi/app/uffd.log; )
  - echo "server { listen 127.0.0.1:5000 default_server;  include /etc/uffd/nginx.include.conf; }" > /etc/nginx/sites-enabled/uffd.ini
  - service nginx start || ( service nginx status; nginx -t; exit 1; )
  - uffd-admin routes
  - curl -Lv 127.0.0.1:5000

test:package:apt:bullseye:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/debian:bullseye
  stage: test
  needs:
  - job: build:apt
  before_script: []
  script:
  - apt -y update
  - apt -y install curl ./*.deb
  - service uwsgi start uffd || ( service uwsgi status uffd ; sleep 15; cat /var/log/uwsgi/app/uffd.log; )
  - echo "server { listen 127.0.0.1:5000 default_server;  include /etc/uffd/nginx.include.conf; }" > /etc/nginx/sites-enabled/uffd.ini
  - service nginx start || ( service nginx status; nginx -t; exit 1; )
  - uffd-admin routes
  - curl -Lv 127.0.0.1:5000

.publish:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG =~ /v[0-9]+[.][0-9]+[.][0-9]+.*/'

publish:pip:
  extends: .publish
  script:
  - TWINE_USERNAME="${GITLABPKGS_USERNAME}" TWINE_PASSWORD="${GITLABPKGS_PASSWORD}" python3 -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  - TWINE_USERNAME="${PYPI_USERNAME}" TWINE_PASSWORD="${PYPI_PASSWORD}" python3 -m twine upload dist/*
  dependencies:
  - build:pip

publish:apt:
  extends: .publish
  script:
  - export DEBPATH="$(echo *.deb)"
  - echo Upload deb file, add it to repo and clean up upload
  - curl --user "${APTLY_API_USER}:${APTLY_API_PW}" -X POST -F file=@"$DEBPATH" "${APT_API_URL}/api/files/${APT_REPO}-ci-upload-${CI_JOB_ID}"
  - curl --user "${APTLY_API_USER}:${APTLY_API_PW}" -X POST "${APT_API_URL}/api/repos/${APT_REPO}/file/${APT_REPO}-ci-upload-${CI_JOB_ID}"
  - curl --user "${APTLY_API_USER}:${APTLY_API_PW}" -X DELETE "${APT_API_URL}/api/files/${APT_REPO}-ci-upload-${CI_JOB_ID}"
  - echo Update published repo for all distros
  - 'curl --user "${APTLY_API_USER}:${APTLY_API_PW}" -X PUT -H "Content-Type: application/json" --data "{ }" "${APT_API_URL}/api/publish/uffd/buster"'
  - 'curl --user "${APTLY_API_USER}:${APTLY_API_PW}" -X PUT -H "Content-Type: application/json" --data "{ }" "${APT_API_URL}/api/publish/uffd/bullseye"'
  dependencies:
  - build:apt
